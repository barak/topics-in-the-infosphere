Counting (Approx) Number Of Distinct Elements

Use -approximation
    -hashing


X = sequence to examine.
  elements are integers in range [0...n-1]
  individual elements x_1, x_2, x_3, ..., x_t
  (we use t for the number of elements observed.)

Hash Function h: [0,n-1] -> [0,n-1]

  assumed to be "random", so distinct outputs of h() can be treated as
  uniformly distributed random values.

  ex. h(x_1), h(x_2), h(x_3), ..., h(x_t) is the seq processed by h().

Ideas:

 - keep track of number of distinct h(x_i)'s in some interval, scale
   this up to estimate the number in the whole range.

 - need to make this interval shrink as more data comes, so storage
   does not grow.

 - do this by remembering the k smallest distinct numbers h(S_i) seen,
   where k is chosen to trade off storage against accuracy.  (Bigger
   takes more storage but should give a more accurate estimate.)

 - some algebra: let s be the biggest of the k smallest distinct
   numbers seen so far; let t be the number of elements in the
   sequence seen so far; let t' be the number of distinct elements
   seen so far.

   we would expect, approximately:

     s = k * (n / t')

   since the average separation between distinct elements will be n/t'
   and there are k such gaps to get to s.  Solve this equation for t'
   to get our estimate:

     t' = k * n / s
